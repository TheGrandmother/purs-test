import {el} from '@elemaudio/core'
import WebRenderer from '@elemaudio/web-renderer'

export const createCore = () => {
  const ctx = new AudioContext()
  const core = new WebRenderer()
  window.core = core

  const contextStarter = () => {
    if (ctx.state === 'running') {
      removeEventListener('mouseover', contextStarter)
      removeEventListener('touchstart', contextStarter)
      console.log('ctx resumed.')
    } else {
      ctx.resume()
    }
  }

  addEventListener('mouseover', contextStarter)

  addEventListener('touchstart', contextStarter)

  core.on('load', () => {
    console.log(el.tapIn({name: 'fitta'}))
  })
  const start = async() => {
    const node = await core.initialize(ctx, {
      numberOfInputs: 0,
      numberOfOutputs: 1,
      outputChannelCount: [2],
    })
    node.connect(ctx.destination)
    core.on('meter', function(e) {
      if (e.source === 'kuken') {
        console.log(e.max)
      }
    })
  }
  start()
  return core
}

export const getProps = node => node.props

export const createCtx = new AudioContext()

export const onCoreLoad = core => fn => () => {
  console.log('Binding loader')
  core.on('load', () => {
    console.log('function bound')
    return fn(core)
  })
  return core
}

export const flerp = core => core.render(el.cycle(440), el.cycle(441))

export const render = core => left => right => () => {core.render(left, right); return core}
export const renderMono = core => node => () => {core.render(node, node); return core}

const ctx = new AudioContext()

export const sampleRate = ctx.sampleRate

export const play = core => () => {
  window.core = core
  const start = async() => {
    ctx.resume()
    const node = await core.initialize(ctx, {
      numberOfInputs: 0,
      numberOfOutputs: 1,
      outputChannelCount: [2],
    })
    node.connect(ctx.destination)
    core.on('meter', function(e) {
      if (e.source === 'kuken') {
        console.log(e.max)
      }
      if (e.source === 'right') {
        console.log(e.max)
      }
    })



    console.log(node)
  }
  start()
  return core
}

// Autogenerated
export const __meter        = (...props) => el.meter(...props)
export const __scope        = (...props) => el.scope(...props)
export const __fft          = (...props) => el.fft(...props)
export const __snapshot     = (...props) => el.snapshot(...props)
export const __accum        = (...props) => el.accum(...props)
export const __const        = (...props) => el.const(...props)
export const __counter      = (...props) => el.counter(...props)
export const __db2gain      = (...props) => el.db2gain(...props)
export const __maxhold      = (...props) => el.maxhold(...props)
export const __metro        = (...props) => el.metro(...props)
export const __ms2samps     = (...props) => el.ms2samps(...props)
export const __select       = (...props) => el.select(...props)
export const __sr           = (...props) => el.sr(...props)
export const __tau2pole     = (...props) => el.tau2pole(...props)
export const __time         = (...props) => el.time(...props)
export const __delay        = (...props) => el.delay(...props)
export const __sdelay       = (...props) => el.sdelay(...props)
export const __tapIn        = (...props) => el.tapIn(...props)
export const __tapOut       = (...props) => el.tapOut(...props)
export const __z            = (...props) => el.z(...props)
export const __compress     = (...props) => el.compress(...props)
export const __allpass      = (...props) => el.allpass(...props)
export const __bandpass     = (...props) => el.bandpass(...props)
export const __biquad       = (...props) => el.biquad(...props)
export const __convolve     = (...props) => el.convolve(...props)
export const __dcblock      = (...props) => el.dcblock(...props)
export const __df11         = (...props) => el.df11(...props)
export const __highpass     = (...props) => el.highpass(...props)
export const __highshelf    = (...props) => el.highshelf(...props)
export const __lowpass      = (...props) => el.lowpass(...props)
export const __lowshelf     = (...props) => el.lowshelf(...props)
export const __notch        = (...props) => el.notch(...props)
export const __peak         = (...props) => el.peak(...props)
export const __pink         = (...props) => el.pink(...props)
export const __pole         = (...props) => el.pole(...props)
export const __sm           = (...props) => el.sm(...props)
export const __smooth       = (...props) => el.smooth(...props)
export const __zero         = (...props) => el.zero(...props)
export const __rand         = (...props) => el.rand(...props)
export const __noise        = (...props) => el.noise(...props)
export const __pinknoise    = (...props) => el.pinknoise(...props)
export const __blepsaw      = (...props) => el.blepsaw(...props)
export const __blepsquare   = (...props) => el.blepsquare(...props)
export const __bleptriangle = (...props) => el.bleptriangle(...props)
export const __cycle        = (...props) => el.cycle(...props)
export const __phasor       = (...props) => el.phasor(...props)
export const __saw          = (...props) => el.saw(...props)
export const __square       = (...props) => el.square(...props)
export const __train        = (...props) => el.train(...props)
export const __triangle     = (...props) => el.triangle(...props)
export const __sample       = (...props) => el.sample(...props)
export const __table        = (...props) => el.table(...props)
export const __adsr         = (...props) => el.adsr(...props)
export const __env          = (...props) => el.env(...props)
export const __latch        = (...props) => el.latch(...props)
export const __seq          = (...props) => el.seq(...props)
export const __seq2         = (...props) => el.seq2(...props)
export const __sparseq      = (...props) => el.sparseq(...props)
export const __in           = (...props) => el.in(...props)
export const __sin          = (...props) => el.sin(...props)
export const __cos          = (...props) => el.cos(...props)
export const __tan          = (...props) => el.tan(...props)
export const __tanh         = (...props) => el.tanh(...props)
export const __asinh        = (...props) => el.asinh(...props)
export const __ln           = (...props) => el.ln(...props)
export const __log          = (...props) => el.log(...props)
export const __log2         = (...props) => el.log2(...props)
export const __ceil         = (...props) => el.ceil(...props)
export const __floor        = (...props) => el.floor(...props)
export const __sqrt         = (...props) => el.sqrt(...props)
export const __exp          = (...props) => el.exp(...props)
export const __abs          = (...props) => el.abs(...props)
export const __eq           = (...props) => el.eq(...props)
export const __and          = (...props) => el.and(...props)
export const __or           = (...props) => el.or(...props)
export const __le           = (...props) => el.le(...props)
export const __leq          = (...props) => el.leq(...props)
export const __ge           = (...props) => el.ge(...props)
export const __geq          = (...props) => el.geq(...props)
export const __pow          = (...props) => el.pow(...props)
export const __mod          = (...props) => el.mod(...props)
export const __min          = (...props) => el.min(...props)
export const __max          = (...props) => el.max(...props)
export const __add          = (...props) => el.add(...props)
export const __sub          = (...props) => el.sub(...props)
export const __mul          = (...props) => el.mul(...props)
export const __div          = (...props) => el.div(...props)
